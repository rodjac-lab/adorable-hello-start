import { useState, useEffect, useCallback } from 'react';
import {
  loadJournalEntries,
  updateJournalEntry,
  addJournalEntry,
  getJournalStats
} from '@/lib/journalStorage';
import {
  getJournalEntriesWithSource,
  isCustomJournalDay
} from '@/lib/contentStore';
import type { JournalContentEntry } from '@/lib/contentStore';
import type { JournalEntryFormData } from '@/types/journal';
import { toPersistedJournalEntry } from '@/lib/journalMapper';
import { logger } from '@/lib/logger';

// Plus de defaultEntries - tout est maintenant unifi√© dans le syst√®me de persistance

export const useJournalEntries = () => {
  const [allEntries, setAllEntries] = useState<JournalContentEntry[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadEntriesFromStorage = useCallback((): JournalContentEntry[] => {
    const loaded = loadJournalEntries();
    const withSources = getJournalEntriesWithSource(loaded);
    logger.debug('üìö Chargement des entr√©es termin√©', withSources.map((entry) => ({
      day: entry.day,
      title: entry.title,
      source: entry.source,
    })));
    setAllEntries(withSources);
    return withSources;
  }, []);

  // Charger les entr√©es au d√©marrage avec syst√®me unifi√©
  useEffect(() => {
    logger.info('üöÄ Initialisation du journal depuis la persistance locale');
    try {
      loadEntriesFromStorage();
      setError(null);
    } catch (err) {
      logger.error('‚ùå √âchec du chargement des entr√©es', err);
      setError('Erreur lors du chargement des entr√©es');
    } finally {
      setIsLoading(false);
    }
  }, [loadEntriesFromStorage]);

  // Plus besoin de fusion - tout est unifi√©
  const getAllEntries = useCallback((): JournalContentEntry[] => {
    return [...allEntries].sort((a, b) => a.day - b.day);
  }, [allEntries]);

  const getCustomEntries = useCallback((): JournalContentEntry[] => {
    return getAllEntries().filter(entry => entry.source === 'custom');
  }, [getAllEntries]);

  const isCustom = useCallback((day: number): boolean => {
    const entry = allEntries.find(item => item.day === day);
    if (entry) {
      return entry.source === 'custom';
    }
    return isCustomJournalDay(day);
  }, [allEntries]);

  // Ajouter une nouvelle entr√©e
  const addEntry = useCallback(async (formData: JournalEntryFormData): Promise<boolean> => {
    logger.debug('‚ûï Ajout d\'une nouvelle entr√©e', { title: formData.title });
    
    try {
      const success = await addJournalEntry(toPersistedJournalEntry(formData));

      if (success) {
        // Recharger toutes les donn√©es depuis le localStorage
        loadEntriesFromStorage();
        logger.info('‚úÖ Entr√©e ajout√©e avec succ√®s', { title: formData.title });
        setError(null);
        return true;
      } else {
        setError('Erreur lors de l\'ajout de l\'entr√©e');
        return false;
      }
    } catch (err) {
      logger.error('‚ùå Erreur lors de l\'ajout d\'une entr√©e', err);
      setError('Erreur lors de l\'ajout de l\'entr√©e');
      return false;
    }
  }, [loadEntriesFromStorage]);

  // Modifier une entr√©e existante
  const editEntry = useCallback(async (formData: JournalEntryFormData, originalDay: number): Promise<boolean> => {
    logger.debug('‚úèÔ∏è Modification d\'une entr√©e', { day: originalDay, title: formData.title });
    
    try {
      const success = await updateJournalEntry(toPersistedJournalEntry(formData));

      // Toujours recharger les donn√©es et retourner true pour fermer le formulaire
      loadEntriesFromStorage();

      if (success) {
        logger.info('‚úÖ Entr√©e mise √† jour', { day: originalDay, title: formData.title });
        setError(null);
      } else {
        logger.warn('‚ö†Ô∏è La sauvegarde a √©chou√©, v√©rifiez le quota localStorage');
        setError('Sauvegarde √©chou√©e: quota localStorage d√©pass√©. R√©duisez la taille des photos.');
      }
      
      // Toujours retourner true pour fermer le formulaire
      return true;
    } catch (err) {
      logger.error('‚ùå Erreur lors de la modification d\'une entr√©e', err);
      setError('Erreur lors de la modification: ' + (err as Error).message);

      // M√™me en cas d'erreur, on recharge et on ferme le formulaire
      loadEntriesFromStorage();
      return true;
    }
  }, [loadEntriesFromStorage]);

  // Obtenir les statistiques
  const getStats = useCallback(() => {
    return getJournalStats();
  }, []);

  // Forcer le rechargement des donn√©es
  const reloadEntries = useCallback(() => {
    logger.debug('üîÑ Rechargement manuel des entr√©es');
    setIsLoading(true);
    try {
      loadEntriesFromStorage();
      setError(null);
    } catch (err) {
      logger.error('‚ùå √âchec du rechargement des entr√©es', err);
      setError('Erreur lors du rechargement des entr√©es');
    } finally {
      setIsLoading(false);
    }
  }, [loadEntriesFromStorage]);

  return {
    allEntries: getAllEntries(),
    customEntries: getCustomEntries(),
    isCustom,
    isLoading,
    error,
    addEntry,
    editEntry,
    getStats,
    reloadEntries
  };
};