export type JournalEntry = {
  day: number;
  date: string;
  title: string;
  location: string;
  story: string;
  mood: string;
  photos?: string[];
  link?: string;
};

const STORAGE_KEY = 'journalEntries';
const BACKUP_KEY = 'journalEntries_backup';
const BACKUP_2_KEY = 'journalEntries_backup2';
const VERSION_KEY = 'journalStorage_version';
const CURRENT_VERSION = '2.1';

// Migration des jours 1 et 2 depuis le code vers le syst√®me unifi√©
const LEGACY_ENTRIES: JournalEntry[] = [
  { 
    day: 1, 
    date: "15 mars 2024",
    title: "Arriv√©e √† Amman",
    location: "Amman, Jordanie",
    story: "D√©part de Lyon le 30/07, direction Paris CDG en train. Le trajet en Ouigo s'est av√©r√© d√©cevant : inconfort, mal de dos‚Ä¶ Heureusement, √† l'a√©roport CDG, les choses s'encha√Ænent facilement : pas de bagage √† enregistrer, embarquement rapide. Les places en rang 11 offrent un bon confort pour les jambes, mais le dos continue de protester.\n\n√Ä l'arriv√©e √† l'a√©roport Queen Alia d'Amman, un contact de l'agence nous prend en charge. Les formalit√©s sont rapides. Achat de carte SIM, puis trajet de 45 minutes jusqu'√† l'h√¥tel. La chaleur est bien l√†. Le chauffeur est bavard et parle un peu fran√ßais. Une fois √† l'h√¥tel : installation et dodo.",
    mood: "Enthousiaste"
  },
  {
    day: 2,
    date: "16 mars 2024", 
    title: "Jerash, Ajlun et spa √† Amman",
    location: "Jerash, Ajlun, Amman",
    story: "Mal dormi, toujours ce mal de dos. Petit d√©jeuner tr√®s correct √† l'h√¥tel, puis r√©ception de la voiture de location. Grosse d√©ception : au lieu du SUV attendu, on se retrouve avec une Nissan Kicks. ¬´ Yes, this is mini SUV sir ¬ª. Mouais‚Ä¶ On compte faire une r√©clamation.\n\nDirection Jerash. Les ruines romaines sont splendides. Le site est immense, bien conserv√©. On y ressent l'empreinte d'un pass√© glorieux. Une balade impressionnante √† travers les si√®cles.\n\nD√©jeuner sur place : assiette mixte grill avec agneau, b≈ìuf et poulet, hummus, taboul√©. Tout est d√©licieux, les saveurs locales s'imposent d√®s ce premier vrai repas.\n\nDans un coin discret du restaurant, cette salle √©tait r√©serv√©e √† la pr√©paration des chichas. Align√©es comme des soldats pr√™ts √† servir, elles attendaient les amateurs de fum√©e parfum√©e. Nous avons d√©clin√© l'invitation cette fois-ci. Peut-√™tre une autre fois.\n\nL'apr√®s-midi, visite du ch√¢teau de Ajlun. Int√©ressant mais tr√®s fr√©quent√©, un peu trop. Retour √† Amman pour une s√©ance spa √† l'h√¥tel : hammam, sauna, gommage, massage‚Ä¶ Une belle pause bien m√©rit√©e.\n\nLe soir, d√Æner chez Ghaith, petit restaurant familial du quartier, √† distance de marche. Tr√®s bon, ambiance simple et conviviale.",
    mood: "Mitig√©",
    link: "https://maps.app.goo.gl/XHDM6vpRh1KCrQbB6"
  }
];

/**
 * Migration automatique - Ajoute les jours 1 et 2 s'ils n'existent pas d√©j√†
 */
const runMigration = (): void => {
  try {
    const version = localStorage.getItem(VERSION_KEY);
    if (version === CURRENT_VERSION) {
      console.log('‚úÖ Storage version up to date');
      return;
    }

    console.log('üîÑ Running migration to version', CURRENT_VERSION);
    
    // Charger les entr√©es existantes
    const existingEntries = loadJournalEntriesRaw();
    const existingDays = new Set(existingEntries.map(e => e.day));
    
    // Ajouter les jours manquants depuis LEGACY_ENTRIES
    const entriesToAdd = LEGACY_ENTRIES.filter(entry => !existingDays.has(entry.day));
    
    if (entriesToAdd.length > 0) {
      const allEntries = [...existingEntries, ...entriesToAdd].sort((a, b) => a.day - b.day);
      const dataToSave = JSON.stringify(allEntries);
      localStorage.setItem(STORAGE_KEY, dataToSave);
      console.log(`‚úÖ Migration complete: Added ${entriesToAdd.length} legacy entries`);
    } else {
      console.log('‚úÖ Migration complete: No legacy entries to add');
    }
    
    // Marquer la migration comme termin√©e
    localStorage.setItem(VERSION_KEY, CURRENT_VERSION);
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
  }
};

/**
 * Convertit blob URLs en base64 pour la persistance et nettoie les photos manquantes
 */
const convertBlobsToBase64 = async (entries: JournalEntry[]): Promise<JournalEntry[]> => {
  const processedEntries = await Promise.all(
    entries.map(async (entry) => {
      if (!entry.photos || entry.photos.length === 0) {
        return entry;
      }

      const processedPhotos = await Promise.all(
        entry.photos.map(async (photo) => {
          // Si c'est d√©j√† une base64, la garder
          if (photo.startsWith('data:')) {
            return photo;
          }

          // Si c'est une URL normale (pas blob), la garder mais noter si elle est accessible
          if (!photo.startsWith('blob:')) {
            // Pour les URLs normales, on les garde mais on peut ajouter une validation plus tard
            return photo;
          }

          try {
            // Convertir blob en base64
            const response = await fetch(photo);
            const blob = await response.blob();
            
            return new Promise<string>((resolve) => {
              const reader = new FileReader();
              reader.onloadend = () => {
                const result = reader.result as string;
                console.log(`‚úÖ Converted blob to base64 (${Math.round(result.length / 1024)}KB)`);
                resolve(result);
              };
              reader.onerror = () => {
                console.warn('‚ö†Ô∏è Failed to read blob:', photo);
                resolve(null);
              };
              reader.readAsDataURL(blob);
            });
          } catch (error) {
            console.warn('‚ö†Ô∏è Failed to convert blob to base64:', photo, error);
            return null; // Supprimer les photos corrompues
          }
        })
      );

      // Filtrer les photos nulles (corrompues ou manquantes)
      const validPhotos = processedPhotos.filter(photo => photo !== null) as string[];
      
      if (validPhotos.length !== entry.photos.length) {
        console.warn(`‚ö†Ô∏è Removed ${entry.photos.length - validPhotos.length} invalid photos from day ${entry.day}`);
      }
      
      return {
        ...entry,
        photos: validPhotos
      };
    })
  );

  return processedEntries;
};

/**
 * Sauvegarde s√©curis√©e avec triple backup et validation renforc√©e
 */
export const saveJournalEntries = async (entries: JournalEntry[]): Promise<boolean> => {
  try {
    console.log(`üíæ Saving ${entries.length} entries...`);
    console.log('üìù Entries to save:', entries.map(e => `Day ${e.day}: ${e.title}`));
    
    // Validation des donn√©es avant sauvegarde
    if (!Array.isArray(entries)) {
      console.error('‚ùå Invalid entries format (not array)');
      return false;
    }

    // Validation d√©taill√©e de chaque entr√©e
    const validatedEntries = entries.filter(entry => {
      const isValid = entry && 
        typeof entry.day === 'number' && 
        typeof entry.title === 'string' && 
        typeof entry.date === 'string' &&
        typeof entry.location === 'string' &&
        typeof entry.story === 'string' &&
        typeof entry.mood === 'string';
      
      if (!isValid) {
        console.warn('‚ö†Ô∏è Skipping invalid entry:', entry);
      }
      return isValid;
    });

    if (validatedEntries.length === 0) {
      console.warn('‚ö†Ô∏è No valid entries to save');
      return false;
    }

    // Convertir les blob URLs en base64 pour la persistance
    const processedEntries = await convertBlobsToBase64(validatedEntries);
    console.log('üîÑ Processed photos for persistence');

    // Trier par jour avant de sauvegarder
    processedEntries.sort((a, b) => a.day - b.day);

    const dataToSave = JSON.stringify(processedEntries);
    console.log(`üìä Data size: ${dataToSave.length} characters`);

    // Cr√©er des backups avant de sauvegarder - TOUJOURS conserver les backups existants
    const currentData = localStorage.getItem(STORAGE_KEY);
    if (currentData && currentData !== dataToSave) {
      // Ne d√©caler les backups que si les donn√©es changent r√©ellement
      const currentBackup1 = localStorage.getItem(BACKUP_KEY);
      if (currentBackup1) {
        localStorage.setItem(BACKUP_2_KEY, currentBackup1);
      }
      localStorage.setItem(BACKUP_KEY, currentData);
      console.log('üíæ Created backups (data changed)');
    } else if (!currentData) {
      console.log('üíæ No previous data, creating initial backup');
    } else {
      console.log('üíæ Data unchanged, skipping backup rotation');
    }

    // Sauvegarder les nouvelles donn√©es
    localStorage.setItem(STORAGE_KEY, dataToSave);
    console.log('‚úÖ Journal entries saved successfully');

    return true;
  } catch (error) {
    console.error('‚ùå Error saving journal entries:', error);
    return false;
  }
};

/**
 * Chargement brut sans migration (pour les op√©rations internes)
 */
const loadJournalEntriesRaw = (): JournalEntry[] => {
  try {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (!saved) return [];

    const parsed = JSON.parse(saved);
    if (!Array.isArray(parsed)) return [];

    return parsed.filter(entry => {
      return entry && 
        typeof entry.day === 'number' && 
        typeof entry.title === 'string' && 
        typeof entry.date === 'string';
    });
  } catch (error) {
    console.error('‚ùå Error loading raw entries:', error);
    return [];
  }
};

/**
 * Chargement s√©curis√© avec migration automatique et r√©cup√©ration
 */
export const loadJournalEntries = (): JournalEntry[] => {
  try {
    console.log('üîç Loading journal entries...');
    
    // Ex√©cuter la migration si n√©cessaire
    runMigration();
    
    const saved = localStorage.getItem(STORAGE_KEY);
    console.log('üìñ Raw data from storage:', saved?.length ? `${saved.length} chars` : 'empty');

    if (!saved) {
      console.log('üì≠ No saved entries found after migration');
      return [];
    }

    const parsed = JSON.parse(saved);
    console.log('‚úÖ Parsed entries:', parsed.length);

    // Validation des donn√©es charg√©es
    if (!Array.isArray(parsed)) {
      console.error('‚ùå Invalid data format in localStorage, attempting recovery');
      return recoverFromBackup();
    }

    // Validation de chaque entr√©e
    const validEntries = parsed.filter(entry => {
      const isValid = entry && 
        typeof entry.day === 'number' && 
        typeof entry.title === 'string' && 
        typeof entry.date === 'string';
      
      if (!isValid) {
        console.warn('‚ö†Ô∏è Invalid entry during load:', entry);
      }
      return isValid;
    });

    if (validEntries.length !== parsed.length) {
      console.warn(`‚ö†Ô∏è Found ${parsed.length - validEntries.length} corrupted entries, using valid ones only`);
      // Sauvegarder les entr√©es valides imm√©diatement
      saveJournalEntries(validEntries);
    }

    console.log('üéØ Final loaded entries:', validEntries.map(e => `Day ${e.day}: ${e.title}`));
    return validEntries;
  } catch (error) {
    console.error('‚ùå Error loading journal entries:', error);
    return recoverFromBackup();
  }
};

/**
 * R√©cup√©ration depuis les backups (triple fallback)
 */
export const recoverFromBackup = (): JournalEntry[] => {
  try {
    console.log('üîÑ Attempting to recover from backups...');
    
    // Essayer backup 1
    const backup1 = localStorage.getItem(BACKUP_KEY);
    if (backup1) {
      try {
        const parsed1 = JSON.parse(backup1);
        if (Array.isArray(parsed1) && parsed1.length > 0) {
          console.log('‚úÖ Successfully recovered from backup 1:', parsed1.length, 'entries');
          localStorage.setItem(STORAGE_KEY, backup1);
          return parsed1;
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Backup 1 corrupted, trying backup 2...');
      }
    }
    
    // Essayer backup 2
    const backup2 = localStorage.getItem(BACKUP_2_KEY);
    if (backup2) {
      try {
        const parsed2 = JSON.parse(backup2);
        if (Array.isArray(parsed2) && parsed2.length > 0) {
          console.log('‚úÖ Successfully recovered from backup 2:', parsed2.length, 'entries');
          localStorage.setItem(STORAGE_KEY, backup2);
          return parsed2;
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Backup 2 corrupted, using legacy entries...');
      }
    }
    
    // Dernier recours : utiliser les entr√©es par d√©faut (jours 1-2)
    console.log('üì¶ Using legacy entries as last resort');
    saveJournalEntries(LEGACY_ENTRIES);
    return LEGACY_ENTRIES;
    
  } catch (error) {
    console.error('‚ùå All recovery attempts failed:', error);
    return [];
  }
};

/**
 * Ajout s√©curis√© d'une nouvelle entr√©e
 */
export const addJournalEntry = async (newEntry: JournalEntry): Promise<boolean> => {
  console.log(`üÜï Adding entry for day ${newEntry.day}:`, newEntry.title);
  
  const currentEntries = loadJournalEntries();
  
  // V√©rifier qu'il n'y a pas d√©j√† une entr√©e pour ce jour
  const existingIndex = currentEntries.findIndex(entry => entry.day === newEntry.day);
  
  let updatedEntries: JournalEntry[];
  if (existingIndex >= 0) {
    // Remplacer l'entr√©e existante
    updatedEntries = [...currentEntries];
    updatedEntries[existingIndex] = newEntry;
    console.log(`üìù Replacing existing entry for day ${newEntry.day}`);
  } else {
    // Ajouter nouvelle entr√©e
    updatedEntries = [...currentEntries, newEntry];
    console.log(`üÜï Adding new entry for day ${newEntry.day}`);
  }

  // Trier par jour
  updatedEntries.sort((a, b) => a.day - b.day);
  
  return await saveJournalEntries(updatedEntries);
};

/**
 * Mise √† jour s√©curis√©e d'une entr√©e existante
 */
export const updateJournalEntry = async (updatedEntry: JournalEntry): Promise<boolean> => {
  console.log(`‚úèÔ∏è Updating entry for day ${updatedEntry.day}:`, updatedEntry.title);
  
  const currentEntries = loadJournalEntries();
  console.log('üìä Current entries before update:', currentEntries.map(e => `Day ${e.day}: ${e.title}`));
  
  const existingIndex = currentEntries.findIndex(entry => entry.day === updatedEntry.day);
  console.log(`üîç Looking for day ${updatedEntry.day}, found at index:`, existingIndex);
  
  if (existingIndex >= 0) {
    // Mettre √† jour l'entr√©e existante
    const updatedEntries = [...currentEntries];
    updatedEntries[existingIndex] = updatedEntry;
    console.log('üìù Updated existing entry:', updatedEntry.title);
    
    // Trier par jour
    updatedEntries.sort((a, b) => a.day - b.day);
    
    return await saveJournalEntries(updatedEntries);
  } else {
    // Cr√©er nouvelle entr√©e si elle n'existe pas
    console.log('üÜï Entry not found, creating new one');
    return await addJournalEntry(updatedEntry);
  }
};

/**
 * Obtenir des statistiques sur les donn√©es
 */
export const getJournalStats = () => {
  const entries = loadJournalEntries();
  const days = entries.map(e => e.day).sort((a, b) => a - b);
  
  return {
    totalEntries: entries.length,
    minDay: days.length > 0 ? days[0] : 0,
    maxDay: days.length > 0 ? days[days.length - 1] : 0,
    days: days,
    storageVersion: localStorage.getItem(VERSION_KEY) || 'unknown',
    hasBackups: !!(localStorage.getItem(BACKUP_KEY) && localStorage.getItem(BACKUP_2_KEY))
  };
};

/**
 * Outils de diagnostic et maintenance
 */
export const diagnosticTools = {
  // Examiner le contenu brut du localStorage
  inspectStorage: () => {
    return {
      main: localStorage.getItem(STORAGE_KEY),
      backup1: localStorage.getItem(BACKUP_KEY),
      backup2: localStorage.getItem(BACKUP_2_KEY),
      version: localStorage.getItem(VERSION_KEY),
      sizes: {
        main: localStorage.getItem(STORAGE_KEY)?.length || 0,
        backup1: localStorage.getItem(BACKUP_KEY)?.length || 0,
        backup2: localStorage.getItem(BACKUP_2_KEY)?.length || 0,
      }
    };
  },

  // Forcer la migration
  forceMigration: () => {
    localStorage.removeItem(VERSION_KEY);
    runMigration();
    return loadJournalEntries();
  },

  // Nettoyer et r√©initialiser
  resetStorage: () => {
    [STORAGE_KEY, BACKUP_KEY, BACKUP_2_KEY, VERSION_KEY].forEach(key => {
      localStorage.removeItem(key);
    });
    runMigration();
    return loadJournalEntries();
  },

  // Restaurer depuis les backups
  recoverFromBackup: () => {
    return recoverFromBackup();
  },

  // Exporter toutes les donn√©es
  exportAll: () => {
    const storage = diagnosticTools.inspectStorage();
    const entries = loadJournalEntries();
    const stats = getJournalStats();
    
    return {
      timestamp: new Date().toISOString(),
      entries,
      stats,
      storage,
      metadata: {
        version: CURRENT_VERSION,
        totalEntries: entries.length,
        entryDays: entries.map(e => e.day)
      }
    };
  },

  // Importer des donn√©es (avec validation)
  importData: async (data: { entries: JournalEntry[] }) => {
    try {
      if (!data.entries || !Array.isArray(data.entries)) {
        throw new Error('Invalid data format');
      }

      // Valider chaque entr√©e
      const validEntries = data.entries.filter(entry => {
        return entry && 
          typeof entry.day === 'number' && 
          typeof entry.title === 'string' && 
          typeof entry.date === 'string';
      });

      console.log(`üì• Importing ${validEntries.length} valid entries`);
      
      const success = await saveJournalEntries(validEntries);
      if (success) {
        console.log('‚úÖ Import successful');
        return { success: true, imported: validEntries.length };
      } else {
        throw new Error('Save failed');
      }
    } catch (error) {
      console.error('‚ùå Import failed:', error);
      return { success: false, error: error.message };
    }
  }
};